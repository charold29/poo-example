import Exercises.Delivery.BranchOffice;
import Exercises.Delivery.Package;

import javax.swing.*;
import java.util.Objects;

public class pooApplication {

    public static Package findPackage(Package[] packages, int idPackage) {
        for(Package p: packages){
            if( p != null && (p.getIdPackage() == idPackage )){
                return p;
            }
        }
        return null;
    }

    public static BranchOffice findBranch(BranchOffice[] branches, String place){
        for(BranchOffice branch:branches){
            if( branch != null && (branch.getAddress().equals(place) || branch.getCity().equals(place))){
                return branch;
            }
        }
        return null;
    }

    public static BranchOffice findBranch(BranchOffice[] branches, int idBranch){
        for(BranchOffice branch:branches){
            if( branch != null && (branch.getId() == idBranch )){
                return branch;
            }
        }
        return null;
    }

    public static String showBranches(BranchOffice[] branches) {
        StringBuilder branchesString = new StringBuilder();

        for (BranchOffice branch : branches) {
            if (branch != null) {
                branchesString.append(branch);
            }
        }
        return "List of branches:\n" + branchesString;
    }

    public static String showPackages(Package[] packages){
        StringBuilder packagesString = new StringBuilder();

        for(Package p: packages){
            if(p != null){
                packagesString.append(p);
            }
        }
        return "List of packages:\n" + packagesString;
    }

    public static void main (String[] args) {

        int idPackage, idBranchOffice = 1, priority;
        String address, city, dni;
        double weight,pricePackage;

        BranchOffice[] branches = new BranchOffice[30];
        Package[] packages = new Package[100];
        int counterBranches = 0, counterPackages = 0;

        //MENU
        int option;
        do{
            option = Integer.parseInt(JOptionPane.showInputDialog("\tMENU\n" +
                    "(1) Create new branch office\n" +
                    "(2) Send package\n" +
                    "(3) Check out branch office\n" +
                    "(4) Check out package\n" +
                    "(5) Show all branches\n" +
                    "(6) Show all packages\n" +
                    "(7) Exit"));

            switch(option){
                case 1: // Create branch
                    address = JOptionPane.showInputDialog("Type the address:");
                    city = JOptionPane.showInputDialog("Type the city:");

                    BranchOffice b = new BranchOffice(idBranchOffice,address,city);
                    branches[counterBranches] = b;

                    JOptionPane.showMessageDialog(null, "Branch created correctly.");
                    idBranchOffice++;
                    counterBranches++;

                    break;
                case 2: // Create package
                    String branchPlace = JOptionPane.showInputDialog("Where do you want to send the package from?");
                    BranchOffice branchTarget = findBranch(branches, branchPlace);
                    if(branchTarget != null){
                        idPackage = Integer.parseInt(JOptionPane.showInputDialog("Type the package id:"));
                        dni = JOptionPane.showInputDialog("Type the dni:");

                        weight = Double.parseDouble(JOptionPane.showInputDialog("Type the package weight:"));
                        priority = Integer.parseInt(JOptionPane.showInputDialog("Type the priority:\n" +
                                "(0) Normal [No charge]\n" +
                                "(1) High [+10 dollars]\n" +
                                "(2) Express [+20 dollars] "));

                        Package p = new Package(idPackage,dni,weight,priority);
                        packages[counterPackages] = p;

                        pricePackage = branchTarget.calculatePrice(p);
                        JOptionPane.showMessageDialog(null, "Your package was sent correctly.\n" +
                                "The shipping price is: $" + pricePackage );

                        counterPackages++;
                    }else
                        JOptionPane.showMessageDialog(null, "Type a correct city or address.");

                    break;
                case 3: // Search branch
                    idBranchOffice = Integer.parseInt(JOptionPane.showInputDialog("Type a branch office id:"));
                    BranchOffice branchSearched = findBranch(branches, idBranchOffice);
                    // Requires mandatory a nonNull Object<BranchOffice> else print default message
                    JOptionPane.showMessageDialog(null, Objects.requireNonNullElse(branchSearched, "Branch not found"));
                    break;
                case 4: // Search package
                    idPackage = Integer.parseInt(JOptionPane.showInputDialog("Type a package id:"));
                    Package packageSearched = findPackage(packages, idPackage);
                    // Requires mandatory a nonNull Object<Package> else print default message
                    JOptionPane.showMessageDialog(null, Objects.requireNonNullElse(packageSearched, "Package not found"));
                    break;
                case 5: // List branches
                    JOptionPane.showMessageDialog(null, showBranches(branches));
                    break;
                case 6: // List packages
                    JOptionPane.showMessageDialog(null, showPackages(packages));
                    break;
                case 7:
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Type a correct option.");
            }
        }while (option != 7);
    }
}